import React, { useEffect, useState } from 'react';

const PUBLIC_VAPID_KEY =
  'BD-OsbXoHHwg7KaxQsy5GsjV4YF0OV9FYl06UFs0cwd77pfvd1AF_dL2ZhnwYWAshHMBST517DAydyPBSr3FnK0';

function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  const outputArray = new Uint8Array(rawData.length);
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

async function subscribeUser() {
  if ('serviceWorker' in navigator && 'PushManager' in window) {
    const reg = await navigator.serviceWorker.ready;
    return await reg.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(PUBLIC_VAPID_KEY),
    });
  } else {
    throw new Error('Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
  }
}

const PushSender = () => {
  const [message, setMessage] = useState('');
  const [status, setStatus] = useState('');
  const [users, setUsers] = useState([]);
  const [selectedUsername, setSelectedUsername] = useState('');

  // üß≤ –ü–æ–¥–ø–∏—Å–∫–∞ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–æ–∫–∫–µ
  const handleSubscribe = async () => {
    try {
      setStatus('üîÑ –ü–æ–¥–ø–∏—Å–∫–∞...');
      const subscription = await subscribeUser();
      const username = localStorage.getItem('username') || 'anonymous';

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      const checkRes = await fetch(`https://e9bdb34d48b55567.mokky.dev/data?username=${username}`);
      const existing = await checkRes.json();

      if (existing.length > 0) {
        // –û–±–Ω–æ–≤–∏—Ç—å
        await fetch(`https://e9bdb34d48b55567.mokky.dev/data/${existing[0].id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, subscription }),
        });
      } else {
        // –°–æ–∑–¥–∞—Ç—å
        await fetch('https://e9bdb34d48b55567.mokky.dev/data', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, subscription }),
        });
      }

      setStatus('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      loadUsers(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    } catch (err) {
      console.error(err);
      setStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ' + err.message);
    }
  };

  // üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const handleSend = async () => {
    if (!selectedUsername) {
      setStatus('‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    try {
      setStatus('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...');
      const res = await fetch('https://server-pwa-iota.vercel.app/api/send-notification', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username: selectedUsername, message }),
      });

      if (res.ok) {
        setStatus('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        setStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (err) {
      console.error(err);
      setStatus('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const loadUsers = async () => {
    try {
      const res = await fetch('https://e9bdb34d48b55567.mokky.dev/data');
      const data = await res.json();
      setUsers(data.map((u) => u.username));
    } catch (err) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', err);
    }
  };

  useEffect(() => {
    navigator.serviceWorker.ready
      .then((reg) => reg.pushManager.getSubscription())
      .then((sub) => sub?.unsubscribe())
      .then(() => console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞'));

    loadUsers();
  }, []);

  return (
    <div style={{ padding: 20, fontFamily: 'sans-serif' }}>
      <h2>Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h2>

      <button onClick={handleSubscribe} style={{ marginBottom: 10, padding: '8px 16px' }}>
        üîê –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>

      <div style={{ margin: '10px 0' }}>
        <select
          value={selectedUsername}
          onChange={(e) => setSelectedUsername(e.target.value)}
          style={{ padding: '8px', width: '220px' }}
        >
          <option value="">üë§ –í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</option>
          {users.map((u, i) => (
            <option key={i} value={u}>
              {u}
            </option>
          ))}
        </select>
      </div>

      <input
        type="text"
        placeholder="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        style={{ width: '300px', padding: '8px', marginRight: '10px' }}
      />
      <button onClick={handleSend} style={{ padding: '8px 16px' }}>
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å Push
      </button>

      <div style={{ marginTop: 10 }}>{status}</div>
    </div>
  );
};

export default PushSender;
